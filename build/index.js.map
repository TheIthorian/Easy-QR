{
  "version": 3,
  "sources": ["../build/dist/CanvasGrid.js", "../build/dist/Polynomial.js", "../build/dist/QRArray.js", "../build/dist/util.js", "../build/dist/QRCode.js", "../build/dist/QR.js", "../build/index.js"],
  "sourcesContent": ["export class CanvasGrid {\n  constructor(canvasId, size) {\n    this.canvasElement = document.getElementById(canvasId);\n    this.width = size;\n    this.height = size;\n    this.canvasElement.width = Math.min(document.body.clientWidth / 2, document.body.clientHeight / 2);\n    this.canvasElement.height = this.canvasElement.width;\n    this.tileSize = this.canvasElement.width / size;\n  }\n  fillCell(index, color) {\n    let coords = this._findPosition(index);\n    let x = coords[0] * this.tileSize;\n    let y = coords[1] * this.tileSize;\n    var context = this.canvasElement.getContext(\"2d\");\n    context.beginPath();\n    context.fillStyle = color;\n    context.fillRect(x, y, this.tileSize, this.tileSize);\n    context.stroke();\n  }\n  _findPosition(index) {\n    let x = index % this.width;\n    let y = Math.floor(index / this.width);\n    return [x, y];\n  }\n  _findIndex(x, y) {\n    if (x >= this.width || y >= this.height || x < 0 || y < 0) {\n      return -1;\n    }\n    return this.width * y + x;\n  }\n}\n", "const LOG = new Uint8Array(256);\nconst EXP = new Uint8Array(256);\nfor (let exponent = 1, value = 1; exponent < 256; exponent++) {\n  value = value > 127 ? value << 1 ^ 285 : value << 1;\n  LOG[value] = exponent % 255;\n  EXP[exponent % 255] = value;\n}\nfunction mul(a, b) {\n  return a && b ? EXP[(LOG[a] + LOG[b]) % 255] : 0;\n}\nfunction div(a, b) {\n  return EXP[(LOG[a] + LOG[b] * 254) % 255];\n}\nfunction polyMul(poly1, poly2) {\n  const coefficients = new Uint8Array(poly1.length + poly2.length - 1);\n  for (let index = 0; index < coefficients.length; index++) {\n    let coefficient = 0;\n    for (let p1Index = 0; p1Index <= index; p1Index++) {\n      const p2Index = index - p1Index;\n      coefficient ^= mul(poly1[p1Index], poly2[p2Index]);\n    }\n    coefficients[index] = coefficient;\n  }\n  return coefficients;\n}\nexport function polyRest(dividend, divisor) {\n  const quotientLength = dividend.length - divisor.length + 1;\n  let rest = new Uint8Array(dividend);\n  for (let count = 0; count < quotientLength; count++) {\n    if (rest[0]) {\n      const factor = div(rest[0], divisor[0]);\n      const subtr = new Uint8Array(rest.length);\n      subtr.set(polyMul(divisor, new Uint8Array([factor])), 0);\n      rest = rest.map((value, index) => value ^ subtr[index]).slice(1);\n    } else {\n      rest = rest.slice(1);\n    }\n  }\n  return rest;\n}\nexport function getGeneratorPoly(degree) {\n  let lastPoly = new Uint8Array([1]);\n  for (let i = 0; i < degree; i++) {\n    lastPoly = polyMul(lastPoly, new Uint8Array([1, EXP[i]]));\n  }\n  return lastPoly;\n}\nexport function getEDC(data, codewords) {\n  const degree = codewords - data.length;\n  const messagePoly = new Uint8Array(codewords);\n  messagePoly.set(data, 0);\n  return polyRest(messagePoly, getGeneratorPoly(degree));\n}\n", "import {polyRest} from \"./Polynomial.js\";\nexport class QRArray {\n  constructor(qrCode, codewords) {\n    this.data = codewords;\n    this.correctionLevel = qrCode.correctionLevel;\n    this.array = [];\n    this.size = qrCode.size;\n    this.version = qrCode.version;\n    for (let i = 0; i < this.size * this.size; i++) {\n      this.array[i] = \"\";\n    }\n  }\n  coordToIndex(x, y) {\n    return this.size * y + x;\n  }\n  indexToCorrd(i) {\n    return [i % this.size, Math.floor(i / this.size) + 1];\n  }\n  addTimingPattern() {\n    let toggle = true;\n    for (let i = 0; i < this.size; i++) {\n      this.array[this.coordToIndex(6, i)] = toggle ? \"1\" : \"0\";\n      toggle = !toggle;\n    }\n    toggle = true;\n    for (let i = 0; i < this.size; i++) {\n      this.array[this.coordToIndex(i, 6)] = toggle ? \"1\" : \"0\";\n      toggle = !toggle;\n    }\n  }\n  addFinderPattern() {\n    const LARGE_SQURE = [\n      [\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"],\n      [\"1\", \"0\", \"0\", \"0\", \"0\", \"0\", \"1\"],\n      [\"1\", \"0\", \"1\", \"1\", \"1\", \"0\", \"1\"],\n      [\"1\", \"0\", \"1\", \"1\", \"1\", \"0\", \"1\"],\n      [\"1\", \"0\", \"1\", \"1\", \"1\", \"0\", \"1\"],\n      [\"1\", \"0\", \"0\", \"0\", \"0\", \"0\", \"1\"],\n      [\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]\n    ];\n    const startPositions = [\n      0,\n      this.size - LARGE_SQURE.length,\n      this.size * (this.size - LARGE_SQURE.length)\n    ];\n    for (let position of startPositions) {\n      for (let i = 0; i < LARGE_SQURE.length; i++) {\n        for (let j = 0; j < LARGE_SQURE.length; j++) {\n          this.array[position + i + this.size * j] = LARGE_SQURE[i][j];\n        }\n      }\n    }\n    for (let i = 0; i < 9; i++) {\n      this.array[this.coordToIndex(7, i)] = \"0\";\n      this.array[this.coordToIndex(i, 7)] = \"0\";\n      this.array[this.coordToIndex(8, i)] = \"0\";\n      this.array[this.coordToIndex(i, 8)] = \"0\";\n    }\n    this.array[this.coordToIndex(8, 6)] = \"1\";\n    this.array[this.coordToIndex(6, 8)] = \"1\";\n    for (let i = 0; i < 8; i++) {\n      this.array[this.coordToIndex(this.size - 8 + i, 7)] = \"0\";\n      this.array[this.coordToIndex(this.size - 8, i)] = \"0\";\n    }\n    for (let i = 0; i < 9; i++) {\n      this.array[this.coordToIndex(7, this.size - i)] = \"0\";\n      this.array[this.coordToIndex(i, this.size - 8)] = \"0\";\n    }\n    this.array[this.coordToIndex(8, this.size - 8)] = \"1\";\n  }\n  addSmallFinderPatterns() {\n    let patternLocations = this.getAlignmentPatternPositions();\n    for (let x = 0; x < patternLocations.length; x++) {\n      for (let y = 0; y < patternLocations.length; y++) {\n        if (x == 0 && y == 0 || x == 0 && y == patternLocations.length - 1 || x == patternLocations.length - 1 && y == 0) {\n          continue;\n        } else {\n          this.addSmallerFinderSquare(patternLocations[x], patternLocations[y]);\n        }\n      }\n    }\n  }\n  addSmallerFinderSquare(x, y) {\n    const SMALL_SQUARE = [\n      [\"1\", \"1\", \"1\", \"1\", \"1\"],\n      [\"1\", \"0\", \"0\", \"0\", \"1\"],\n      [\"1\", \"0\", \"1\", \"0\", \"1\"],\n      [\"1\", \"0\", \"0\", \"0\", \"1\"],\n      [\"1\", \"1\", \"1\", \"1\", \"1\"]\n    ];\n    for (let i = 0; i < 5; i++) {\n      for (let j = 0; j < 5; j++) {\n        this.array[this.coordToIndex(x - 2 + i, y - 2 + j)] = SMALL_SQUARE[i][j];\n      }\n    }\n  }\n  getAlignmentPatternPositions() {\n    if (this.version == 1)\n      return [];\n    else {\n      const numAlign = Math.floor(this.version / 7) + 2;\n      const step = this.version == 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;\n      let result = [6];\n      for (let pos = this.size - 7; result.length < numAlign; pos -= step)\n        result.splice(1, 0, pos);\n      return result;\n    }\n  }\n  addVersionInformation() {\n    if (this.version < 7) {\n      return;\n    }\n    let data = this.getVersionInformation(this.version);\n    for (let row = 0; row < 6; row++) {\n      for (let column = 0; column < 3; column++) {\n        this.array[this.coordToIndex(row, this.size - 11 + column)] = data[3 * row + column].toString();\n        this.array[this.coordToIndex(this.size - 11 + column, row)] = data[3 * row + column].toString();\n      }\n    }\n  }\n  getVersionInformation(version) {\n    const VERSION_DIVISOR = new Uint8Array([1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1]);\n    const polyArray = version.toString(2).padStart(6, \"0\") + \"000000000000\";\n    const poly = Uint8Array.from(polyArray.split(\"\").map((char) => parseInt(char)));\n    poly.set(polyRest(poly, VERSION_DIVISOR), 6);\n    return poly;\n  }\n  placeCodewordHorizontalPair(index, x, y) {\n    if (x < 0 || y < 0) {\n      return;\n    }\n    this.array[this.coordToIndex(x, y)] = this.data[index];\n    this.array[this.coordToIndex(x - 1, y)] = this.data[index + 1];\n  }\n  placeCodewordPair(index, x, y) {\n    this.array[this.coordToIndex(x, y)] = this.data[index];\n  }\n  placeCodewordVerticalPair(index, x, y, goingUp) {\n    let direction = goingUp ? 1 : -1;\n    this.array[this.coordToIndex(x, y)] = this.data[index];\n    for (let i = 1; i <= 6; i++) {\n      this.array[this.coordToIndex(x, y + direction * i)] = this.data[index + i];\n    }\n    index += 6;\n    y += 6 * direction;\n  }\n  addCodewords() {\n    let x_pos, y_pos, goingUp;\n    goingUp = true;\n    x_pos = this.size - 1;\n    y_pos = this.size - 1;\n    let alignmetPatternPositions = this.getAlignmentPatternPositions();\n    for (let i = 0; i < this.data.length; i += 2) {\n      if (i == 0) {\n        this.placeCodewordHorizontalPair(i, x_pos, y_pos);\n        y_pos--;\n        continue;\n      }\n      if (goingUp) {\n        if (this.version >= 7 && y_pos == 7 && x_pos == this.size - 9) {\n          [i, x_pos, y_pos, goingUp] = this.skipVersionInfo(i, x_pos, y_pos, goingUp);\n        } else if (y_pos == 9 && (x_pos > this.size - 8 || x_pos <= 8) || y_pos == 0) {\n          [i, x_pos, y_pos, goingUp] = this.placeBoundaryCells(i, x_pos, y_pos, goingUp);\n        } else if (alignmetPatternPositions.includes(y_pos - 3) && alignmetPatternPositions.includes(x_pos - 2)) {\n          this.placeCodewordHorizontalPair(i, x_pos, y_pos);\n          y_pos -= 6;\n        } else if (this.isAtAlignmentPattern(x_pos, y_pos, alignmetPatternPositions, goingUp)) {\n          this.placeCodewordHorizontalPair(i, x_pos, y_pos);\n          i += 2;\n          x_pos--;\n          y_pos--;\n          for (let _ = 0; _ < 5; _++) {\n            this.placeCodewordPair(i, x_pos, y_pos);\n            y_pos--;\n            i++;\n          }\n          i -= 2;\n          x_pos++;\n        } else if (y_pos == 6) {\n          y_pos--;\n          this.placeCodewordHorizontalPair(i, x_pos, y_pos);\n          y_pos--;\n        } else {\n          this.placeCodewordHorizontalPair(i, x_pos, y_pos);\n          y_pos--;\n        }\n      } else if (!goingUp) {\n        if (y_pos == this.size - 1 && x_pos == 10) {\n          this.placeCodewordHorizontalPair(i, x_pos, y_pos);\n          x_pos = 8;\n          y_pos = this.size - 9;\n          goingUp = true;\n        } else if (y_pos == this.size - 9 && x_pos <= 8 || y_pos == this.size - 1) {\n          [i, x_pos, y_pos, goingUp] = this.placeBoundaryCells(i, x_pos, y_pos, goingUp);\n        } else if (this.isAtAlignmentPattern(x_pos, y_pos, alignmetPatternPositions, goingUp)) {\n          this.placeCodewordHorizontalPair(i, x_pos, y_pos);\n          y_pos += 6;\n        } else if (y_pos == 6) {\n          y_pos++;\n          this.placeCodewordHorizontalPair(i, x_pos, y_pos);\n          y_pos++;\n        } else {\n          this.placeCodewordHorizontalPair(i, x_pos, y_pos);\n          y_pos++;\n        }\n      }\n      if (x_pos < 0) {\n        return;\n      }\n    }\n  }\n  skipVersionInfo(i, x_pos, y_pos, goingUp) {\n    if (goingUp) {\n      this.placeCodewordHorizontalPair(i, x_pos, y_pos);\n      y_pos = 0;\n      x_pos = this.size - 12;\n      i++;\n      for (let j = 0; j < 6; j++) {\n        this.array[this.coordToIndex(x_pos, y_pos + j)] = this.data[i];\n        i++;\n      }\n      y_pos = 7;\n      x_pos = this.size - 11;\n      this.placeCodewordHorizontalPair(i, x_pos, y_pos);\n      y_pos++;\n      goingUp = false;\n      return [i, x_pos, y_pos, goingUp];\n    } else {\n      return;\n    }\n  }\n  placeBoundaryCells(i, x_pos, y_pos, goingUp) {\n    if (goingUp) {\n      this.placeCodewordHorizontalPair(i, x_pos, y_pos);\n      i += 2;\n      x_pos == 8 && y_pos == 9 ? x_pos -= 3 : x_pos -= 2;\n      goingUp = false;\n      this.placeCodewordHorizontalPair(i, x_pos, y_pos);\n      y_pos++;\n      return [i, x_pos, y_pos, goingUp];\n    } else {\n      this.placeCodewordHorizontalPair(i, x_pos, y_pos);\n      x_pos -= 2;\n      i += 2;\n      goingUp = true;\n      this.placeCodewordHorizontalPair(i, x_pos, y_pos);\n      y_pos--;\n      return [i, x_pos, y_pos, goingUp];\n    }\n  }\n  isAtAlignmentPattern(x_pos, y_pos, alignmetPatternPositions, goingUp) {\n    if (goingUp) {\n      return alignmetPatternPositions.includes(y_pos - 3) && alignmetPatternPositions.includes(x_pos + 2) && !(alignmetPatternPositions[0] == x_pos + 2 && alignmetPatternPositions[0] == y_pos - 3) && !(alignmetPatternPositions[0] == x_pos + 2 && alignmetPatternPositions[alignmetPatternPositions.length - 1] == y_pos - 3) && !(alignmetPatternPositions[0] == y_pos - 3 && alignmetPatternPositions[alignmetPatternPositions.length - 1] == x_pos + 2);\n    } else {\n      return alignmetPatternPositions.includes(y_pos + 3) && (alignmetPatternPositions.includes(x_pos) || alignmetPatternPositions.includes(x_pos + 1)) && !(alignmetPatternPositions[0] == x_pos && alignmetPatternPositions[0] == y_pos + 3) && !(alignmetPatternPositions[0] == x_pos && alignmetPatternPositions[alignmetPatternPositions.length - 1] == y_pos + 3) && !(alignmetPatternPositions[0] == x_pos + 1 && alignmetPatternPositions[alignmetPatternPositions.length - 1] == y_pos + 3) && !(alignmetPatternPositions[0] == y_pos + 3 && alignmetPatternPositions[alignmetPatternPositions.length - 1] == x_pos);\n    }\n  }\n  applyMasks() {\n    for (let i = 0; i < this.array.length; i++) {\n      if (i % 2 == 0) {\n        this.array[i] = (parseInt(this.array[i]) ^ 1).toString();\n      } else {\n        this.array[i] = (parseInt(this.array[i]) ^ 0).toString();\n      }\n    }\n  }\n  addErrorLevel() {\n    let maskIndex = 0;\n    const EDC_ORDER = \"MLHQ\";\n    const FORMAT_DIVISOR = new Uint8Array([1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1]);\n    const FORMAT_MASK = new Uint8Array([1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0]);\n    const formatPoly = new Uint8Array(15);\n    const errorLevelIndex = EDC_ORDER.indexOf(this.correctionLevel);\n    formatPoly[0] = errorLevelIndex >> 1;\n    formatPoly[1] = errorLevelIndex & 1;\n    formatPoly[2] = maskIndex >> 2;\n    formatPoly[3] = maskIndex >> 1 & 1;\n    formatPoly[4] = maskIndex & 1;\n    const rest = polyRest(formatPoly, FORMAT_DIVISOR);\n    formatPoly.set(rest, 5);\n    let maskedFormatPoly = formatPoly.map((bit, index) => bit ^ FORMAT_MASK[index]);\n    for (let i = 0; i < 7; i++) {\n      let val;\n      if (maskedFormatPoly[i] == 254) {\n        val = \"1\";\n      } else if (maskedFormatPoly[i] == 255) {\n        val = \"0\";\n      } else {\n        val = maskedFormatPoly[i].toString();\n      }\n      let dx = 0;\n      if (i > 5) {\n        dx = 1;\n      }\n      this.array[this.coordToIndex(i + dx, 8)] = val;\n      this.array[this.coordToIndex(8, this.size - i - 1)] = val;\n    }\n    for (let i = 7; i < 15; i++) {\n      let val;\n      if (maskedFormatPoly[i] == 254) {\n        val = \"1\";\n      } else if (maskedFormatPoly[i] == 255) {\n        val = \"0\";\n      } else {\n        val = maskedFormatPoly[i].toString();\n      }\n      let dy = 0;\n      if (i > 8) {\n        dy = 1;\n      }\n      this.array[this.coordToIndex(8, 15 - i - dy)] = val;\n      this.array[this.coordToIndex(this.size - 15 + i, 8)] = val;\n    }\n  }\n  addAlternating() {\n    for (let i = 0; i < this.size * this.size; i++) {\n      this.array[i] = i % 2 ? \"0\" : \"1\";\n    }\n  }\n}\nconst MASK_FUNCTIONS = [\n  (row, column) => (row + column & 1) === 0,\n  (row, column) => (row & 1) === 0,\n  (row, column) => column % 3 === 0,\n  (row, column) => (row + column) % 3 === 0,\n  (row, column) => ((row >> 1) + Math.floor(column / 3) & 1) === 0,\n  (row, column) => (row * column & 1) + row * column % 3 === 0,\n  (row, column) => ((row * column & 1) + row * column % 3 & 1) === 0,\n  (row, column) => ((row + column & 1) + row * column % 3 & 1) === 0\n];\n", "export function toBinary(sInput) {\n  sInput = sInput.toString();\n  var output = \"\";\n  for (var i = 0; i < sInput.length; i++) {\n    output += sInput[i].charCodeAt(0).toString(2);\n  }\n  return output;\n}\nexport function binaryToHex(sBinary) {\n  return parseInt(sBinary, 2).toString(16);\n}\nexport function intToHex(iInt) {\n  return parseInt(iInt, 10).toString(16);\n}\n", "const CELL_COLORS = {\n  1: \"#000000\",\n  0: \"#FFFFFF\"\n};\nconst DEFAULT_COLOR = \"#FF0000\";\nimport {CanvasGrid} from \"./CanvasGrid.js\";\nimport {getEDC} from \"./Polynomial.js\";\nimport {QRArray} from \"./QRArray.js\";\nimport * as Util from \"./util.js\";\nconst CORRECTION_LEVELS = {\n  L: 0.07,\n  M: 0.15,\n  Q: 0.25,\n  H: 0.3\n};\nconst MODES = {\n  Numeric: \"0001\",\n  Alphanumeric: \"0010\",\n  Byte: \"0100\",\n  Kanji: \"1000\",\n  ECI: \"0111\"\n};\nconst CHARACTER_LENGTH_MAP = {\n  Numeric: function(version) {\n    if (version < 10) {\n      return 10;\n    } else if (version < 17) {\n      return 12;\n    } else {\n      return 14;\n    }\n  },\n  Alphanumeric: function(version) {\n    if (version < 10) {\n      return 9;\n    } else if (version < 17) {\n      return 11;\n    } else {\n      return 13;\n    }\n  },\n  Byte: function(version) {\n    if (version < 10) {\n      return 8;\n    } else if (version < 17) {\n      return 16;\n    } else {\n      return 16;\n    }\n  },\n  Kanji: function(version) {\n    if (version < 10) {\n      return 8;\n    } else if (version < 17) {\n      return 10;\n    } else {\n      return 12;\n    }\n  },\n  ECI: function(version) {\n    return 0;\n  }\n};\nconst VERSION_DATA = {\n  L: {\n    totalDataCodewords: [\n      19,\n      34,\n      55,\n      80,\n      108,\n      136,\n      156,\n      194,\n      232,\n      274,\n      324,\n      370,\n      428,\n      461,\n      523,\n      589,\n      647,\n      721,\n      795,\n      861,\n      932,\n      1006,\n      1094,\n      1174,\n      1276,\n      1370,\n      1468,\n      1531,\n      1631,\n      1735,\n      1843,\n      1955,\n      2071,\n      2191,\n      2306,\n      2434,\n      2566,\n      2702,\n      2812,\n      2956,\n      1276\n    ],\n    ECCodeWordsPerBlock: [\n      7,\n      10,\n      15,\n      20,\n      26,\n      18,\n      20,\n      24,\n      30,\n      18,\n      20,\n      24,\n      26,\n      30,\n      22,\n      24,\n      28,\n      30,\n      28,\n      28,\n      28,\n      28,\n      30,\n      30,\n      26,\n      28,\n      30,\n      30,\n      30,\n      30,\n      30,\n      30,\n      30,\n      30,\n      30,\n      30,\n      30,\n      30,\n      30,\n      30,\n      30\n    ],\n    blocksInGroup1: [\n      1,\n      1,\n      1,\n      1,\n      1,\n      2,\n      2,\n      2,\n      2,\n      2,\n      4,\n      2,\n      4,\n      3,\n      5,\n      5,\n      1,\n      5,\n      3,\n      3,\n      4,\n      2,\n      4,\n      6,\n      8,\n      10,\n      8,\n      3,\n      7,\n      5,\n      13,\n      17,\n      17,\n      13,\n      12,\n      6,\n      17,\n      4,\n      20,\n      19,\n      20\n    ],\n    codewordsInGroup1Block: [\n      19,\n      34,\n      55,\n      80,\n      108,\n      68,\n      78,\n      97,\n      116,\n      68,\n      81,\n      92,\n      107,\n      115,\n      87,\n      98,\n      107,\n      120,\n      113,\n      107,\n      116,\n      111,\n      121,\n      117,\n      106,\n      114,\n      122,\n      117,\n      116,\n      115,\n      115,\n      115,\n      115,\n      115,\n      121,\n      121,\n      122,\n      122,\n      117,\n      118,\n      15\n    ],\n    blocksInGroup2: [\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      2,\n      0,\n      2,\n      0,\n      1,\n      1,\n      1,\n      5,\n      1,\n      4,\n      5,\n      4,\n      7,\n      5,\n      4,\n      4,\n      2,\n      4,\n      10,\n      7,\n      10,\n      3,\n      0,\n      1,\n      6,\n      7,\n      14,\n      4,\n      18,\n      4,\n      6,\n      61\n    ],\n    codewordsInGroup2Block: [\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      69,\n      0,\n      93,\n      0,\n      116,\n      88,\n      99,\n      108,\n      121,\n      114,\n      108,\n      117,\n      112,\n      122,\n      118,\n      107,\n      115,\n      123,\n      118,\n      117,\n      116,\n      116,\n      0,\n      116,\n      116,\n      122,\n      122,\n      123,\n      123,\n      118,\n      119,\n      16\n    ],\n    ModeSize: {\n      Numeric: [\n        41,\n        77,\n        127,\n        187,\n        255,\n        322,\n        370,\n        461,\n        552,\n        652,\n        772,\n        883,\n        1022,\n        1101,\n        1250,\n        1408,\n        1548,\n        1725,\n        1903,\n        2061,\n        2232,\n        2409,\n        2620,\n        2812,\n        3057,\n        3283,\n        3517,\n        3669,\n        3909,\n        4158,\n        4417,\n        4686,\n        4965,\n        5253,\n        5529,\n        5836,\n        6153,\n        6479,\n        6743,\n        7089\n      ],\n      Alphanumeric: [\n        25,\n        47,\n        77,\n        114,\n        154,\n        195,\n        224,\n        279,\n        335,\n        395,\n        468,\n        535,\n        619,\n        667,\n        758,\n        854,\n        938,\n        1046,\n        1153,\n        1249,\n        1352,\n        1460,\n        1588,\n        1704,\n        1853,\n        1990,\n        2132,\n        2223,\n        2369,\n        2520,\n        2677,\n        2840,\n        3009,\n        3183,\n        3351,\n        3537,\n        3729,\n        3927,\n        4087,\n        4296\n      ],\n      Byte: [\n        17,\n        32,\n        53,\n        78,\n        106,\n        134,\n        154,\n        192,\n        230,\n        271,\n        321,\n        367,\n        425,\n        458,\n        520,\n        586,\n        644,\n        718,\n        792,\n        858,\n        929,\n        1003,\n        1091,\n        1171,\n        1273,\n        1367,\n        1465,\n        1528,\n        1628,\n        1732,\n        1840,\n        1952,\n        2068,\n        2188,\n        2303,\n        2431,\n        2563,\n        2699,\n        2809,\n        2953\n      ],\n      Kanji: [\n        10,\n        20,\n        32,\n        48,\n        65,\n        82,\n        95,\n        118,\n        141,\n        167,\n        198,\n        226,\n        262,\n        282,\n        320,\n        361,\n        397,\n        442,\n        488,\n        528,\n        572,\n        618,\n        672,\n        721,\n        784,\n        842,\n        902,\n        940,\n        1002,\n        1066,\n        1132,\n        1201,\n        1273,\n        1347,\n        1417,\n        1496,\n        1577,\n        1661,\n        1729,\n        1817\n      ],\n      ECI: [0]\n    }\n  },\n  M: {\n    totalDataCodewords: [\n      16,\n      28,\n      44,\n      64,\n      86,\n      108,\n      124,\n      154,\n      182,\n      216,\n      254,\n      290,\n      334,\n      365,\n      415,\n      453,\n      507,\n      563,\n      627,\n      669,\n      714,\n      782,\n      860,\n      914,\n      1e3,\n      1062,\n      1128,\n      1193,\n      1267,\n      1373,\n      1455,\n      1541,\n      1631,\n      1725,\n      1812,\n      1914,\n      1992,\n      2102,\n      2216,\n      2334\n    ],\n    ECCodeWordsPerBlock: [\n      10,\n      16,\n      26,\n      18,\n      24,\n      16,\n      18,\n      22,\n      22,\n      26,\n      30,\n      22,\n      22,\n      24,\n      24,\n      28,\n      28,\n      26,\n      26,\n      26,\n      26,\n      28,\n      28,\n      28,\n      28,\n      28,\n      28,\n      28,\n      28,\n      28,\n      28,\n      28,\n      28,\n      28,\n      28,\n      28,\n      28,\n      28,\n      28,\n      28\n    ],\n    blocksInGroup1: [\n      1,\n      1,\n      1,\n      2,\n      2,\n      4,\n      4,\n      2,\n      3,\n      4,\n      1,\n      6,\n      8,\n      4,\n      5,\n      7,\n      10,\n      9,\n      3,\n      3,\n      17,\n      17,\n      4,\n      6,\n      8,\n      19,\n      22,\n      3,\n      21,\n      19,\n      2,\n      10,\n      14,\n      14,\n      12,\n      6,\n      29,\n      13,\n      40,\n      18\n    ],\n    codewordsInGroup1Block: [\n      16,\n      28,\n      44,\n      32,\n      43,\n      27,\n      31,\n      38,\n      36,\n      43,\n      50,\n      36,\n      37,\n      40,\n      41,\n      45,\n      46,\n      43,\n      44,\n      41,\n      42,\n      46,\n      47,\n      45,\n      47,\n      46,\n      45,\n      45,\n      45,\n      47,\n      46,\n      46,\n      46,\n      46,\n      47,\n      47,\n      46,\n      46,\n      47,\n      47\n    ],\n    blocksInGroup2: [\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      2,\n      2,\n      1,\n      4,\n      2,\n      1,\n      5,\n      5,\n      3,\n      1,\n      4,\n      11,\n      13,\n      0,\n      0,\n      14,\n      14,\n      13,\n      4,\n      3,\n      23,\n      7,\n      10,\n      29,\n      23,\n      21,\n      23,\n      26,\n      34,\n      14,\n      32,\n      7,\n      31\n    ],\n    codewordsInGroup2Block: [\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      39,\n      37,\n      44,\n      51,\n      37,\n      38,\n      41,\n      42,\n      46,\n      47,\n      44,\n      45,\n      42,\n      0,\n      0,\n      48,\n      46,\n      48,\n      47,\n      46,\n      46,\n      46,\n      48,\n      47,\n      47,\n      47,\n      47,\n      48,\n      48,\n      47,\n      47,\n      48,\n      48\n    ],\n    ModeSize: {\n      Numeric: [\n        34,\n        63,\n        101,\n        149,\n        202,\n        255,\n        293,\n        365,\n        432,\n        513,\n        604,\n        691,\n        796,\n        871,\n        991,\n        1082,\n        1212,\n        1346,\n        1500,\n        1600,\n        1708,\n        1872,\n        2059,\n        2188,\n        2395,\n        2544,\n        2701,\n        2857,\n        3035,\n        3289,\n        3486,\n        3693,\n        3909,\n        4134,\n        4343,\n        4588,\n        4775,\n        5039,\n        5313,\n        5596\n      ],\n      Alphanumeric: [\n        20,\n        38,\n        61,\n        90,\n        122,\n        154,\n        178,\n        221,\n        262,\n        311,\n        366,\n        419,\n        483,\n        528,\n        600,\n        656,\n        734,\n        816,\n        909,\n        970,\n        1035,\n        1134,\n        1248,\n        1326,\n        1451,\n        1542,\n        1637,\n        1732,\n        1839,\n        1994,\n        2113,\n        2238,\n        2369,\n        2506,\n        2632,\n        2780,\n        2894,\n        3054,\n        3220,\n        3391\n      ],\n      Byte: [\n        14,\n        26,\n        42,\n        62,\n        84,\n        106,\n        122,\n        152,\n        180,\n        213,\n        251,\n        287,\n        331,\n        362,\n        412,\n        450,\n        504,\n        560,\n        624,\n        666,\n        711,\n        779,\n        857,\n        911,\n        997,\n        1059,\n        1125,\n        1190,\n        1264,\n        1370,\n        1452,\n        1538,\n        1628,\n        1722,\n        1809,\n        1911,\n        1989,\n        2099,\n        2213,\n        2331\n      ],\n      Kanji: [\n        8,\n        16,\n        26,\n        38,\n        52,\n        65,\n        75,\n        93,\n        111,\n        131,\n        155,\n        177,\n        204,\n        223,\n        254,\n        277,\n        310,\n        345,\n        384,\n        410,\n        438,\n        480,\n        528,\n        561,\n        614,\n        652,\n        692,\n        732,\n        778,\n        843,\n        894,\n        947,\n        1002,\n        1060,\n        1113,\n        1176,\n        1224,\n        1292,\n        1362,\n        1435\n      ],\n      ECI: [0]\n    }\n  },\n  Q: {\n    totalDataCodewords: [\n      13,\n      22,\n      34,\n      48,\n      62,\n      76,\n      88,\n      110,\n      132,\n      154,\n      180,\n      206,\n      244,\n      261,\n      295,\n      325,\n      367,\n      397,\n      445,\n      485,\n      512,\n      568,\n      614,\n      664,\n      718,\n      754,\n      808,\n      871,\n      911,\n      985,\n      1033,\n      1115,\n      1171,\n      1231,\n      1286,\n      1354,\n      1426,\n      1502,\n      1582,\n      1666\n    ],\n    ECCodeWordsPerBlock: [\n      13,\n      22,\n      18,\n      26,\n      18,\n      24,\n      18,\n      22,\n      20,\n      24,\n      28,\n      26,\n      24,\n      20,\n      30,\n      24,\n      28,\n      28,\n      26,\n      30,\n      28,\n      30,\n      30,\n      30,\n      30,\n      28,\n      30,\n      30,\n      30,\n      30,\n      30,\n      30,\n      30,\n      30,\n      30,\n      30,\n      30,\n      30,\n      30,\n      30\n    ],\n    blocksInGroup1: [\n      1,\n      1,\n      2,\n      2,\n      2,\n      4,\n      2,\n      4,\n      4,\n      6,\n      4,\n      4,\n      8,\n      11,\n      5,\n      15,\n      1,\n      17,\n      17,\n      15,\n      17,\n      7,\n      11,\n      11,\n      7,\n      28,\n      8,\n      4,\n      1,\n      15,\n      42,\n      10,\n      29,\n      44,\n      39,\n      46,\n      49,\n      48,\n      43,\n      34\n    ],\n    codewordsInGroup1Block: [\n      13,\n      22,\n      17,\n      24,\n      15,\n      19,\n      14,\n      18,\n      16,\n      19,\n      22,\n      20,\n      20,\n      16,\n      24,\n      19,\n      22,\n      22,\n      21,\n      24,\n      22,\n      24,\n      24,\n      24,\n      24,\n      22,\n      23,\n      24,\n      23,\n      24,\n      24,\n      24,\n      24,\n      24,\n      24,\n      24,\n      24,\n      24,\n      24,\n      24\n    ],\n    blocksInGroup2: [\n      0,\n      0,\n      0,\n      0,\n      2,\n      0,\n      4,\n      2,\n      4,\n      2,\n      4,\n      6,\n      4,\n      5,\n      7,\n      2,\n      15,\n      1,\n      4,\n      5,\n      6,\n      16,\n      14,\n      16,\n      22,\n      6,\n      26,\n      31,\n      37,\n      25,\n      1,\n      35,\n      19,\n      7,\n      14,\n      10,\n      10,\n      14,\n      22,\n      34\n    ],\n    codewordsInGroup2Block: [\n      0,\n      0,\n      0,\n      0,\n      16,\n      0,\n      15,\n      19,\n      17,\n      20,\n      23,\n      21,\n      21,\n      17,\n      25,\n      20,\n      23,\n      23,\n      22,\n      25,\n      23,\n      25,\n      25,\n      25,\n      25,\n      23,\n      24,\n      25,\n      24,\n      25,\n      25,\n      25,\n      25,\n      25,\n      25,\n      25,\n      25,\n      25,\n      25,\n      25\n    ],\n    ModeSize: {\n      Numeric: [\n        27,\n        48,\n        77,\n        111,\n        144,\n        178,\n        207,\n        259,\n        312,\n        364,\n        427,\n        489,\n        580,\n        621,\n        703,\n        775,\n        876,\n        948,\n        1063,\n        1159,\n        1224,\n        1358,\n        1468,\n        1588,\n        1718,\n        1804,\n        1933,\n        2085,\n        2181,\n        2358,\n        2473,\n        2670,\n        2805,\n        2949,\n        3081,\n        3244,\n        3417,\n        3599,\n        3791,\n        3993\n      ],\n      Alphanumeric: [\n        16,\n        29,\n        47,\n        67,\n        87,\n        108,\n        125,\n        157,\n        189,\n        221,\n        259,\n        296,\n        352,\n        376,\n        426,\n        470,\n        531,\n        574,\n        644,\n        702,\n        742,\n        823,\n        890,\n        963,\n        1041,\n        1094,\n        1172,\n        1263,\n        1322,\n        1429,\n        1499,\n        1618,\n        1700,\n        1787,\n        1867,\n        1966,\n        2071,\n        2181,\n        2298,\n        2420\n      ],\n      Byte: [\n        11,\n        20,\n        32,\n        46,\n        60,\n        74,\n        86,\n        108,\n        130,\n        151,\n        177,\n        203,\n        241,\n        258,\n        292,\n        322,\n        364,\n        394,\n        442,\n        482,\n        509,\n        565,\n        611,\n        661,\n        715,\n        751,\n        805,\n        868,\n        908,\n        982,\n        1030,\n        1112,\n        1168,\n        1228,\n        1283,\n        1351,\n        1423,\n        1499,\n        1579,\n        1663\n      ],\n      Kanji: [\n        7,\n        12,\n        20,\n        28,\n        37,\n        45,\n        53,\n        66,\n        80,\n        93,\n        109,\n        125,\n        149,\n        159,\n        180,\n        198,\n        224,\n        243,\n        272,\n        297,\n        314,\n        348,\n        376,\n        407,\n        440,\n        462,\n        496,\n        534,\n        559,\n        604,\n        634,\n        684,\n        719,\n        756,\n        790,\n        832,\n        876,\n        923,\n        972,\n        1024\n      ],\n      ECI: [0]\n    }\n  },\n  H: {\n    totalDataCodewords: [\n      9,\n      16,\n      26,\n      36,\n      46,\n      60,\n      66,\n      86,\n      100,\n      122,\n      140,\n      158,\n      180,\n      197,\n      223,\n      253,\n      283,\n      313,\n      341,\n      385,\n      406,\n      442,\n      464,\n      514,\n      538,\n      596,\n      628,\n      661,\n      701,\n      745,\n      793,\n      845,\n      901,\n      961,\n      986,\n      1054,\n      1096,\n      1142,\n      1222,\n      1276\n    ],\n    ECCodeWordsPerBlock: [\n      17,\n      28,\n      22,\n      16,\n      22,\n      28,\n      26,\n      26,\n      24,\n      28,\n      24,\n      28,\n      22,\n      24,\n      24,\n      30,\n      28,\n      28,\n      26,\n      28,\n      30,\n      24,\n      30,\n      30,\n      30,\n      30,\n      30,\n      30,\n      30,\n      30,\n      30,\n      30,\n      30,\n      30,\n      30,\n      30,\n      30,\n      30,\n      30,\n      30\n    ],\n    blocksInGroup1: [\n      1,\n      1,\n      2,\n      4,\n      2,\n      4,\n      4,\n      4,\n      4,\n      6,\n      3,\n      7,\n      12,\n      11,\n      11,\n      3,\n      2,\n      2,\n      9,\n      15,\n      19,\n      34,\n      16,\n      30,\n      22,\n      33,\n      12,\n      11,\n      19,\n      23,\n      23,\n      19,\n      11,\n      59,\n      22,\n      2,\n      24,\n      42,\n      10,\n      20\n    ],\n    codewordsInGroup1Block: [\n      9,\n      16,\n      13,\n      9,\n      11,\n      15,\n      13,\n      14,\n      12,\n      15,\n      12,\n      14,\n      11,\n      12,\n      12,\n      15,\n      14,\n      14,\n      13,\n      15,\n      16,\n      13,\n      15,\n      16,\n      15,\n      16,\n      15,\n      15,\n      15,\n      15,\n      15,\n      15,\n      15,\n      16,\n      15,\n      15,\n      15,\n      15,\n      15,\n      15\n    ],\n    blocksInGroup2: [\n      0,\n      0,\n      0,\n      0,\n      2,\n      0,\n      1,\n      2,\n      4,\n      2,\n      8,\n      4,\n      4,\n      5,\n      7,\n      13,\n      17,\n      19,\n      16,\n      10,\n      6,\n      0,\n      14,\n      2,\n      13,\n      4,\n      28,\n      31,\n      26,\n      25,\n      28,\n      35,\n      46,\n      1,\n      41,\n      64,\n      46,\n      32,\n      67,\n      61\n    ],\n    codewordsInGroup2Block: [\n      0,\n      0,\n      0,\n      0,\n      12,\n      0,\n      14,\n      15,\n      13,\n      16,\n      13,\n      15,\n      12,\n      13,\n      13,\n      16,\n      15,\n      15,\n      14,\n      16,\n      17,\n      0,\n      16,\n      17,\n      16,\n      17,\n      16,\n      16,\n      16,\n      16,\n      16,\n      16,\n      16,\n      17,\n      16,\n      16,\n      16,\n      16,\n      16,\n      16\n    ],\n    ModeSize: {\n      Numeric: [\n        17,\n        34,\n        58,\n        82,\n        106,\n        139,\n        154,\n        202,\n        235,\n        288,\n        331,\n        374,\n        427,\n        468,\n        530,\n        602,\n        674,\n        746,\n        813,\n        919,\n        969,\n        1056,\n        1108,\n        1228,\n        1286,\n        1425,\n        1501,\n        1581,\n        1677,\n        1782,\n        1897,\n        2022,\n        2157,\n        2301,\n        2361,\n        2524,\n        2625,\n        2735,\n        2927,\n        3057\n      ],\n      Alphanumeric: [\n        10,\n        20,\n        35,\n        50,\n        64,\n        84,\n        93,\n        122,\n        143,\n        174,\n        200,\n        227,\n        259,\n        283,\n        321,\n        365,\n        408,\n        452,\n        493,\n        557,\n        587,\n        640,\n        672,\n        744,\n        779,\n        864,\n        910,\n        958,\n        1016,\n        1080,\n        1150,\n        1226,\n        1307,\n        1394,\n        1431,\n        1530,\n        1591,\n        1658,\n        1774,\n        1852\n      ],\n      Byte: [\n        7,\n        14,\n        24,\n        34,\n        44,\n        58,\n        64,\n        84,\n        98,\n        119,\n        137,\n        155,\n        177,\n        194,\n        220,\n        250,\n        280,\n        310,\n        338,\n        382,\n        403,\n        439,\n        461,\n        511,\n        535,\n        593,\n        625,\n        658,\n        698,\n        742,\n        790,\n        842,\n        898,\n        958,\n        983,\n        1051,\n        1093,\n        1139,\n        1219,\n        1273\n      ],\n      Kanji: [\n        4,\n        8,\n        15,\n        21,\n        27,\n        36,\n        39,\n        52,\n        60,\n        74,\n        85,\n        96,\n        109,\n        120,\n        136,\n        154,\n        173,\n        191,\n        208,\n        235,\n        248,\n        270,\n        284,\n        315,\n        330,\n        365,\n        385,\n        405,\n        430,\n        457,\n        486,\n        518,\n        553,\n        590,\n        605,\n        647,\n        673,\n        701,\n        750,\n        784\n      ],\n      ECI: [0]\n    }\n  }\n};\nconst DATA_LOG = {};\nconst ERROR_LOOKUP = {\n  ERC_NUMERIC_MODE_INVALID_DATA: \"Numeric mode may only contain digits\",\n  ERC_ALPHANUMERIC_MODE_INVALID_DATA: \"Alphanumeric mode may only contain digits and upper-case letters\",\n  ERC_BYTE_MODE_INVALID_DATA: \"Some characters not allowed in Byte mode\",\n  ERC_KANJI_MODE_INVALID_DATA: \"Some characters not allowed in Kanji mode\",\n  ERC_INPUT_TEXT_TOO_LONG: \"The input value is too long for the selected mode\",\n  ERC_VERSION_NOT_SUPPORTED: \"QR version with more than one error corretion group is not supported\"\n};\nconst MODE_REGEX = {\n  Numeric: /^\\d*$/,\n  Alphanmeric: /^[\\dA-Z $%*+\\-./:]*$/,\n  Byte: /^[\\x00-\\xff]*$/,\n  Kanji: /^[\\p{Script_Extensions=Han}\\p{Script_Extensions=Hiragana}\\p{Script_Extensions=Katakana}]*$/u\n};\nexport class QRCode {\n  constructor(canvasId, data, mode = \"Byte\", correctionLevel = \"L\") {\n    this.canvasId = canvasId;\n    this.data = data;\n    this.mode = mode;\n    this.correctionLevel = correctionLevel;\n    let validateResult = this.validateData(\"\");\n    if (!validateResult[0]) {\n      throw ERROR_LOOKUP[validateResult[1]];\n    }\n    this.version = this.#getRequiredVersion();\n    this.size = this.#getSize();\n    if (VERSION_DATA[this.correctionLevel].blocksInGroup2[this.version - 1] > 0) {\n      console.log(this.version);\n      throw ERROR_LOOKUP[\"ERC_VERSION_NOT_SUPPORTED\"];\n    }\n    log({\n      Properties: {\n        Size: this.size,\n        Version: this.version,\n        \"Correction Level\": this.correctionLevel\n      }\n    }, true);\n    if (this.canvasId) {\n      this.canvasGrid = new CanvasGrid(this.canvasId, this.size);\n    }\n  }\n  #getRequiredVersion() {\n    let lengths = VERSION_DATA[this.correctionLevel].ModeSize[this.mode];\n    let version;\n    for (let i = 0; i < lengths.length; i++) {\n      if (lengths[i] > this.data.length) {\n        version = i + 1;\n        break;\n      }\n    }\n    return version;\n  }\n  #getSize() {\n    return 17 + 4 * this.version;\n  }\n  validateData(data) {\n    if (data > VERSION_DATA[this.correctionLevel][39]) {\n      return [false, \"ERC_INPUT_TEXT_TOO_LONG\"];\n    }\n    if (!MODE_REGEX[this.mode].test(data)) {\n      switch (this.mode) {\n        case \"Numeric\":\n          return [false, \"ERC_NUMERIC_MODE_INVALID_DATA\"];\n        case \"Alphanumeric\":\n          return [false, \"ERC_ALPHANUMERIC_MODE_INVALID_DATA\"];\n        case \"Byte\":\n          return [false, \"ERC_BYTE_MODE_INVALID_DATA\"];\n        case \"Kanji\":\n          return [false, \"ERC_KANJI_MODE_INVALID_DATA\"];\n        default:\n          return [false, -1];\n      }\n    } else {\n      return [true];\n    }\n  }\n  generateCode() {\n    let codewords = this.getCodeWords();\n    [this.group1, this.group2] = this.getGroups(codewords);\n    log({\"Group 1\": this.group1, \"Group 2\": this.group2});\n    let group1Coefficients = this.getGroupCoefficients(this.group1);\n    let group2Coefficients = this.getGroupCoefficients(this.group2);\n    let numberOfErrorCorrectionCodeWords = this.getNumberOfErrorCorrectionCodeWords();\n    let numberOfCodeWords = this.getTotalNumberOfCodewords();\n    let group1Coefficients_Hex = [];\n    let group2Coefficients_Hex = [];\n    for (let i = 0; i < group1Coefficients.length; i++) {\n      group1Coefficients_Hex.push(Util.intToHex(group1Coefficients[i]));\n    }\n    for (let i = 0; i < group2Coefficients.length; i++) {\n      group2Coefficients_Hex.push(Util.intToHex(group2Coefficients[i]));\n    }\n    log({\n      numberOfErrorCorrectionCodeWords,\n      group1Coefficients,\n      group1Coefficients_Hex,\n      group2Coefficients,\n      group2Coefficients_Hex,\n      numberofCodeWords: numberOfCodeWords\n    });\n    let groups = [];\n    for (let i = 0; i < group1Coefficients.length; i++) {\n      groups[i] = group1Coefficients[i];\n    }\n    for (let i = 0; i < group2Coefficients.length; i++) {\n      groups[group1Coefficients.length + i] = group2Coefficients[i];\n    }\n    let ECC = getEDC(groups, numberOfErrorCorrectionCodeWords + numberOfCodeWords);\n    let ECC_Hex = [];\n    for (let i = 0; i < ECC.length; i++) {\n      codewords += this.padCharacterLength(parseInt(ECC[\"\" + i], 10).toString(2));\n      ECC_Hex.push(Util.intToHex(ECC[\"\" + i]));\n    }\n    log({ECC, ECC_Hex, codewords}, true);\n    let qrArray = new QRArray(this, codewords);\n    qrArray.addCodewords();\n    qrArray.applyMasks();\n    qrArray.addTimingPattern();\n    qrArray.addFinderPattern();\n    qrArray.addErrorLevel();\n    qrArray.addSmallFinderPatterns();\n    qrArray.addVersionInformation();\n    return qrArray.array;\n  }\n  getCodeWords() {\n    let codewords = \"\";\n    this.totalBits = this.getTotalNumberOfCodewords() * CHARACTER_LENGTH_MAP[this.mode](this.version);\n    let bMode = this.getModeForCodewords();\n    let bDataLength = this.getLengthForCodewords();\n    let bData = this.getDataForCodewords();\n    let bTerminator = this.getTerminatorForCodewords(codewords);\n    codewords += bMode + bDataLength + bData + bTerminator;\n    codewords = this.padCodewords(codewords);\n    log({\n      bMode,\n      bDataLength,\n      bData,\n      bTerminator,\n      totalBits: this.totalBits\n    }, true);\n    return codewords;\n  }\n  getModeForCodewords() {\n    return MODES[this.mode];\n  }\n  getLengthForCodewords() {\n    let bDataLength = this.data.length.toString(2);\n    return this.padCharacterLength(bDataLength);\n  }\n  getTerminatorForCodewords(codewords) {\n    let bTerminator = \"\";\n    for (let i = 0; i < Math.min(this.totalBits - codewords.length, 4); i++) {\n      bTerminator += \"0\";\n    }\n    return bTerminator;\n  }\n  getDataForCodewords() {\n    let output = \"\";\n    if (this.mode == \"Byte\") {\n      for (let i = 0; i < this.data.length; i++) {\n        let bChar = this.padCharacterLength(Util.toBinary(this.data[i]));\n        output += bChar;\n        DATA_LOG[\"bData\"] += bChar;\n      }\n    } else if (this.mode == \"Numeric\") {\n    } else if (this.mode = \"AlphaNumeric\") {\n    }\n    return output;\n  }\n  padCodewords(codewords) {\n    while (codewords.length % 8 != 0) {\n      codewords += \"0\";\n    }\n    let toggle = true;\n    while (codewords.length < this.totalBits) {\n      if (toggle) {\n        codewords += \"11101100\";\n      } else {\n        codewords += \"00010001\";\n      }\n      toggle = !toggle;\n    }\n    return codewords;\n  }\n  getGroups(codewords) {\n    let index = 0, group1, group2;\n    [group1, index] = this.getGroup1(codewords, index);\n    [group2, index] = this.getGroup2(codewords, index);\n    return [group1, group2];\n  }\n  getGroup1(output, index) {\n    let group1 = [];\n    for (let i = 0; i < VERSION_DATA[this.correctionLevel].blocksInGroup1[this.version - 1]; i++) {\n      group1.push([]);\n      for (let j = 0; j < VERSION_DATA[this.correctionLevel].codewordsInGroup1Block[this.version - 1]; j++) {\n        group1[i].push(output.slice(index * 8, (index + 1) * 8));\n        index += 1;\n      }\n    }\n    return [group1, index];\n  }\n  getGroup2(output, index) {\n    let group2 = [];\n    for (let i = 0; i < VERSION_DATA[this.correctionLevel].blocksInGroup2[this.version - 1]; i++) {\n      group2.push([]);\n      for (let j = 0; j < VERSION_DATA[this.correctionLevel].codewordsInGroup2Block[this.version - 1]; j++) {\n        group2[i].push(output.slice(index * 8, (index + 1) * 8));\n        index += 1;\n      }\n    }\n    return [group2, index];\n  }\n  getGroupCoefficients(group) {\n    let coefficients = [];\n    for (let i = 0; i < group.length; i++) {\n      for (let j = 0; j < group[i].length; j++) {\n        coefficients.push(parseInt(group[i][j], 2));\n      }\n    }\n    return coefficients;\n  }\n  padCharacterLength(bCharacter) {\n    let characterLength = CHARACTER_LENGTH_MAP[this.mode](this.version);\n    while (bCharacter.length % characterLength != 0) {\n      bCharacter = \"0\" + bCharacter;\n    }\n    return bCharacter;\n  }\n  getNumberOfErrorCorrectionCodeWords() {\n    return VERSION_DATA[this.correctionLevel].ECCodeWordsPerBlock[this.version - 1] * (VERSION_DATA[this.correctionLevel].blocksInGroup1[this.version - 1] + VERSION_DATA[this.correctionLevel].blocksInGroup2[this.version - 1]);\n  }\n  getTotalNumberOfCodewords() {\n    let blocksInGroup1 = VERSION_DATA[this.correctionLevel].blocksInGroup1[this.version - 1];\n    let codewordsInGroup1Block = VERSION_DATA[this.correctionLevel].codewordsInGroup1Block[this.version - 1];\n    let blocksInGroup2 = VERSION_DATA[this.correctionLevel].blocksInGroup2[this.version - 1];\n    let codewordsInGroup2Block = VERSION_DATA[this.correctionLevel].codewordsInGroup2Block[this.version - 1];\n    return blocksInGroup1 * codewordsInGroup1Block + blocksInGroup2 * codewordsInGroup2Block;\n  }\n  markColumn(qrArray, x) {\n    for (let i = 0; i < qrArray.array.length; i++) {\n      if (i % this.size == x) {\n        qrArray.array[i] = \"X\";\n      }\n    }\n  }\n  markRow(qrArray, y) {\n    for (let i = 0; i < qrArray.array.length; i++) {\n      if (Math.floor(i / this.size) == y) {\n        qrArray.array[i] = \"X\";\n      }\n    }\n  }\n  markPoint(qrArray, x, y) {\n    for (let i = 0; i < qrArray.array.length; i++) {\n      if (Math.floor(i / this.size) == y && i % this.size == x) {\n        qrArray.array[i] = \"X\";\n      }\n    }\n  }\n  display() {\n    const output = this.generateCode();\n    output.forEach((value, index) => {\n      this.canvasGrid.fillCell(index, CELL_COLORS[value] ?? DEFAULT_COLOR);\n    });\n    return output;\n  }\n}\nfunction getCharacterLimit(mode, correctionLevel) {\n  return Math.max(VERSION_DATA[correctionLevel].ModeSize[mode]);\n}\nfunction log(dict, print = false) {\n  for (const key of Object.keys(dict)) {\n    DATA_LOG[key] = dict[key];\n  }\n  if (print) {\n    printLog();\n  }\n}\nfunction printLog() {\n  console.log(\"DATA_LOG: \", DATA_LOG);\n}\n", "import {QRCode} from \"./QRCode.js\";\nexport class QR {\n  constructor(canvasId, data, mode = \"Byte\", correctionLevel = \"L\") {\n    this.qrCode = new QRCode(canvasId, data, mode, correctionLevel);\n  }\n  getCanvasId() {\n    return this.qrCode.canvasId;\n  }\n  setCanvasId(canvasId) {\n    this.qrCode.canvasId = canvasId;\n    return this.qrCode.canvasId;\n  }\n  getMode() {\n    return this.qrCode.mode;\n  }\n  getCorrectionLevel() {\n    return this.qrCode.correctionLevel;\n  }\n  getVersion() {\n    return this.qrCode.version;\n  }\n  getSize() {\n    return this.qrCode.size;\n  }\n  getCode() {\n    return this.qrCode.generateCode();\n  }\n  printCodeToCanvas(canvasId) {\n    this.qrCode.display();\n  }\n}\n", "import { QR } from './dist/QR.js';\r\n\r\nwindow.addEventListener('load', function () {\r\n    document.getElementById('submit').addEventListener('click', function () {\r\n        removeError();\r\n\r\n        const elements = {\r\n            textInput: document.getElementById('input'),\r\n            modeInput: document.getElementById('mode-select'),\r\n            errorCorrectionInput: document.getElementById('error-correction-select'),\r\n        };\r\n\r\n        const data = elements.textInput.value.trim();\r\n        const mode = elements.modeInput.value;\r\n        const errorCorrection = elements.errorCorrectionInput.value;\r\n\r\n        try {\r\n            const qr = new QR('qr', data, mode, errorCorrection);\r\n            qr.printCodeToCanvas();\r\n            console.log(qr.getCode().join(''));\r\n        } catch (err) {\r\n            console.log(err);\r\n            addError(err);\r\n        }\r\n    });\r\n});\r\n\r\nfunction addError(errorText) {\r\n    const errorDiv = document.getElementById('error');\r\n    errorDiv.innerText = errorText;\r\n    errorDiv.classList.add('active');\r\n}\r\n\r\nfunction removeError() {\r\n    const errorDiv = document.getElementById('error');\r\n    errorDiv.innerText = '';\r\n    errorDiv.classList.remove('active');\r\n}\r\n"],
  "mappings": "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,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IAEF,eAAgB,CACd,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,EACA,EACA,EACA,EACA,GACA,GACA,GACA,GACA,GACA,EACA,GACA,EACA,GACA,GACA,IAEF,uBAAwB,CACtB,GACA,GACA,GACA,GACA,IACA,GACA,GACA,GACA,IACA,GACA,GACA,GACA,IACA,IACA,GACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IAEF,eAAgB,CACd,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,EACA,GACA,EACA,EACA,EACA,EACA,EACA,GACA,EACA,GACA,EACA,EACA,IAEF,uBAAwB,CACtB,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,EACA,GACA,EACA,IACA,GACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,EACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IAEF,SAAU,CACR,QAAS,CACP,GACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEF,aAAc,CACZ,GACA,GACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEF,KAAM,CACJ,GACA,GACA,GACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEF,MAAO,CACL,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEF,IAAK,CAAC,KAGV,EAAG,CACD,mBAAoB,CAClB,GACA,GACA,GACA,GACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEF,oBAAqB,CACnB,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IAEF,eAAgB,CACd,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,EACA,EACA,EACA,GACA,GACA,EACA,EACA,EACA,GACA,GACA,EACA,GACA,GACA,EACA,GACA,GACA,GACA,GACA,EACA,GACA,GACA,GACA,IAEF,uBAAwB,CACtB,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IAEF,eAAgB,CACd,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,GACA,EACA,EACA,GACA,GACA,GACA,EACA,EACA,GACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,EACA,IAEF,uBAAwB,CACtB,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,EACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IAEF,SAAU,CACR,QAAS,CACP,GACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEF,aAAc,CACZ,GACA,GACA,GACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEF,KAAM,CACJ,GACA,GACA,GACA,GACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEF,MAAO,CACL,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEF,IAAK,CAAC,KAGV,EAAG,CACD,mBAAoB,CAClB,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEF,oBAAqB,CACnB,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IAEF,eAAgB,CACd,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,EACA,GACA,EACA,GACA,GACA,GACA,GACA,EACA,GACA,GACA,EACA,GACA,EACA,EACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IAEF,uBAAwB,CACtB,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IAEF,eAAgB,CACd,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,EACA,EACA,EACA,EACA,GACA,GACA,GACA,GACA,EACA,GACA,GACA,GACA,GACA,EACA,GACA,GACA,EACA,GACA,GACA,GACA,GACA,GACA,IAEF,uBAAwB,CACtB,EACA,EACA,EACA,EACA,GACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IAEF,SAAU,CACR,QAAS,CACP,GACA,GACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEF,aAAc,CACZ,GACA,GACA,GACA,GACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEF,KAAM,CACJ,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEF,MAAO,CACL,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,MAEF,IAAK,CAAC,KAGV,EAAG,CACD,mBAAoB,CAClB,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,MAEF,oBAAqB,CACnB,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IAEF,eAAgB,CACd,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,GACA,GACA,EACA,EACA,EACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,EACA,GACA,GACA,GACA,IAEF,uBAAwB,CACtB,EACA,GACA,GACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IAEF,eAAgB,CACd,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,GACA,GACA,GACA,GACA,EACA,EACA,GACA,EACA,GACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,EACA,GACA,GACA,GACA,GACA,GACA,IAEF,uBAAwB,CACtB,EACA,EACA,EACA,EACA,GACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IAEF,SAAU,CACR,QAAS,CACP,GACA,GACA,GACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEF,aAAc,CACZ,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEF,KAAM,CACJ,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,MAEF,MAAO,CACL,EACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAEF,IAAK,CAAC,MAIN,EAAW,GACX,EAAe,CACnB,8BAA+B,uCAC/B,mCAAoC,mEACpC,2BAA4B,2CAC5B,4BAA6B,4CAC7B,wBAAyB,oDACzB,0BAA2B,wEAEvB,EAAa,CACjB,QAAS,QACT,YAAa,uBACb,KAAM,iBACN,MAAO,+FAxvDT,QA0vDO,OAAa,CAClB,YAAY,EAAU,EAAM,EAAO,OAAQ,EAAkB,IAAK,CA0BlE,YAWA,YApCE,KAAK,SAAW,EAChB,KAAK,KAAO,EACZ,KAAK,KAAO,EACZ,KAAK,gBAAkB,EACvB,GAAI,GAAiB,KAAK,aAAa,IACvC,GAAI,CAAC,EAAe,GAClB,KAAM,GAAa,EAAe,IAIpC,GAFA,KAAK,QAAU,OAAK,KAAL,WACf,KAAK,KAAO,OAAK,KAAL,WACR,EAAa,KAAK,iBAAiB,eAAe,KAAK,QAAU,GAAK,EACxE,cAAQ,IAAI,KAAK,SACX,EAAa,0BAErB,EAAI,CACF,WAAY,CACV,KAAM,KAAK,KACX,QAAS,KAAK,QACd,mBAAoB,KAAK,kBAE1B,IACC,KAAK,UACP,MAAK,WAAa,GAAI,GAAW,KAAK,SAAU,KAAK,OAiBzD,aAAa,EAAM,CACjB,GAAI,EAAO,EAAa,KAAK,iBAAiB,IAC5C,MAAO,CAAC,GAAO,2BAEjB,GAAK,EAAW,KAAK,MAAM,KAAK,GAc9B,MAAO,CAAC,IAbR,OAAQ,KAAK,UACN,UACH,MAAO,CAAC,GAAO,qCACZ,eACH,MAAO,CAAC,GAAO,0CACZ,OACH,MAAO,CAAC,GAAO,kCACZ,QACH,MAAO,CAAC,GAAO,uCAEf,MAAO,CAAC,GAAO,KAMvB,cAAe,CACb,GAAI,GAAY,KAAK,eACrB,CAAC,KAAK,OAAQ,KAAK,QAAU,KAAK,UAAU,GAC5C,EAAI,CAAC,UAAW,KAAK,OAAQ,UAAW,KAAK,SAC7C,GAAI,GAAqB,KAAK,qBAAqB,KAAK,QACpD,EAAqB,KAAK,qBAAqB,KAAK,QACpD,EAAmC,KAAK,sCACxC,EAAoB,KAAK,4BACzB,EAAyB,GACzB,EAAyB,GAC7B,OAAS,GAAI,EAAG,EAAI,EAAmB,OAAQ,IAC7C,EAAuB,KAAK,AAAK,EAAS,EAAmB,KAE/D,OAAS,GAAI,EAAG,EAAI,EAAmB,OAAQ,IAC7C,EAAuB,KAAK,AAAK,EAAS,EAAmB,KAE/D,EAAI,CACF,mCACA,qBACA,yBACA,qBACA,yBACA,kBAAmB,IAErB,GAAI,GAAS,GACb,OAAS,GAAI,EAAG,EAAI,EAAmB,OAAQ,IAC7C,EAAO,GAAK,EAAmB,GAEjC,OAAS,GAAI,EAAG,EAAI,EAAmB,OAAQ,IAC7C,EAAO,EAAmB,OAAS,GAAK,EAAmB,GAE7D,GAAI,GAAM,EAAO,EAAQ,EAAmC,GACxD,EAAU,GACd,OAAS,GAAI,EAAG,EAAI,EAAI,OAAQ,IAC9B,GAAa,KAAK,mBAAmB,SAAS,EAAI,GAAK,GAAI,IAAI,SAAS,IACxE,EAAQ,KAAK,AAAK,EAAS,EAAI,GAAK,KAEtC,EAAI,CAAC,MAAK,UAAS,aAAY,IAC/B,GAAI,GAAU,GAAI,GAAQ,KAAM,GAChC,SAAQ,eACR,EAAQ,aACR,EAAQ,mBACR,EAAQ,mBACR,EAAQ,gBACR,EAAQ,yBACR,EAAQ,wBACD,EAAQ,MAEjB,cAAe,CACb,GAAI,GAAY,GAChB,KAAK,UAAY,KAAK,4BAA8B,EAAqB,KAAK,MAAM,KAAK,SACzF,GAAI,GAAQ,KAAK,sBACb,EAAc,KAAK,wBACnB,EAAQ,KAAK,sBACb,EAAc,KAAK,0BAA0B,GACjD,UAAa,EAAQ,EAAc,EAAQ,EAC3C,EAAY,KAAK,aAAa,GAC9B,EAAI,CACF,QACA,cACA,QACA,cACA,UAAW,KAAK,WACf,IACI,EAET,qBAAsB,CACpB,MAAO,GAAM,KAAK,MAEpB,uBAAwB,CACtB,GAAI,GAAc,KAAK,KAAK,OAAO,SAAS,GAC5C,MAAO,MAAK,mBAAmB,GAEjC,0BAA0B,EAAW,CACnC,GAAI,GAAc,GAClB,OAAS,GAAI,EAAG,EAAI,KAAK,IAAI,KAAK,UAAY,EAAU,OAAQ,GAAI,IAClE,GAAe,IAEjB,MAAO,GAET,qBAAsB,CACpB,GAAI,GAAS,GACb,GAAI,KAAK,MAAQ,OACf,OAAS,GAAI,EAAG,EAAI,KAAK,KAAK,OAAQ,IAAK,CACzC,GAAI,GAAQ,KAAK,mBAAmB,AAAK,EAAS,KAAK,KAAK,KAC5D,GAAU,EACV,EAAS,OAAY,MAElB,AAAI,MAAK,MAAQ,WACb,MAAK,KAAO,gBAEvB,MAAO,GAET,aAAa,EAAW,CACtB,KAAO,EAAU,OAAS,GAAK,GAC7B,GAAa,IAEf,GAAI,GAAS,GACb,KAAO,EAAU,OAAS,KAAK,WAC7B,AAAI,EACF,GAAa,WAEb,GAAa,WAEf,EAAS,CAAC,EAEZ,MAAO,GAET,UAAU,EAAW,CACnB,GAAI,GAAQ,EAAG,EAAQ,EACvB,OAAC,EAAQ,GAAS,KAAK,UAAU,EAAW,GAC5C,CAAC,EAAQ,GAAS,KAAK,UAAU,EAAW,GACrC,CAAC,EAAQ,GAElB,UAAU,EAAQ,EAAO,CACvB,GAAI,GAAS,GACb,OAAS,GAAI,EAAG,EAAI,EAAa,KAAK,iBAAiB,eAAe,KAAK,QAAU,GAAI,IAAK,CAC5F,EAAO,KAAK,IACZ,OAAS,GAAI,EAAG,EAAI,EAAa,KAAK,iBAAiB,uBAAuB,KAAK,QAAU,GAAI,IAC/F,EAAO,GAAG,KAAK,EAAO,MAAM,EAAQ,EAAI,GAAQ,GAAK,IACrD,GAAS,EAGb,MAAO,CAAC,EAAQ,GAElB,UAAU,EAAQ,EAAO,CACvB,GAAI,GAAS,GACb,OAAS,GAAI,EAAG,EAAI,EAAa,KAAK,iBAAiB,eAAe,KAAK,QAAU,GAAI,IAAK,CAC5F,EAAO,KAAK,IACZ,OAAS,GAAI,EAAG,EAAI,EAAa,KAAK,iBAAiB,uBAAuB,KAAK,QAAU,GAAI,IAC/F,EAAO,GAAG,KAAK,EAAO,MAAM,EAAQ,EAAI,GAAQ,GAAK,IACrD,GAAS,EAGb,MAAO,CAAC,EAAQ,GAElB,qBAAqB,EAAO,CAC1B,GAAI,GAAe,GACnB,OAAS,GAAI,EAAG,EAAI,EAAM,OAAQ,IAChC,OAAS,GAAI,EAAG,EAAI,EAAM,GAAG,OAAQ,IACnC,EAAa,KAAK,SAAS,EAAM,GAAG,GAAI,IAG5C,MAAO,GAET,mBAAmB,EAAY,CAC7B,GAAI,GAAkB,EAAqB,KAAK,MAAM,KAAK,SAC3D,KAAO,EAAW,OAAS,GAAmB,GAC5C,EAAa,IAAM,EAErB,MAAO,GAET,qCAAsC,CACpC,MAAO,GAAa,KAAK,iBAAiB,oBAAoB,KAAK,QAAU,GAAM,GAAa,KAAK,iBAAiB,eAAe,KAAK,QAAU,GAAK,EAAa,KAAK,iBAAiB,eAAe,KAAK,QAAU,IAE5N,2BAA4B,CAC1B,GAAI,GAAiB,EAAa,KAAK,iBAAiB,eAAe,KAAK,QAAU,GAClF,EAAyB,EAAa,KAAK,iBAAiB,uBAAuB,KAAK,QAAU,GAClG,EAAiB,EAAa,KAAK,iBAAiB,eAAe,KAAK,QAAU,GAClF,EAAyB,EAAa,KAAK,iBAAiB,uBAAuB,KAAK,QAAU,GACtG,MAAO,GAAiB,EAAyB,EAAiB,EAEpE,WAAW,EAAS,EAAG,CACrB,OAAS,GAAI,EAAG,EAAI,EAAQ,MAAM,OAAQ,IACxC,AAAI,EAAI,KAAK,MAAQ,GACnB,GAAQ,MAAM,GAAK,KAIzB,QAAQ,EAAS,EAAG,CAClB,OAAS,GAAI,EAAG,EAAI,EAAQ,MAAM,OAAQ,IACxC,AAAI,KAAK,MAAM,EAAI,KAAK,OAAS,GAC/B,GAAQ,MAAM,GAAK,KAIzB,UAAU,EAAS,EAAG,EAAG,CACvB,OAAS,GAAI,EAAG,EAAI,EAAQ,MAAM,OAAQ,IACxC,AAAI,KAAK,MAAM,EAAI,KAAK,OAAS,GAAK,EAAI,KAAK,MAAQ,GACrD,GAAQ,MAAM,GAAK,KAIzB,SAAU,CACR,GAAM,GAAS,KAAK,eACpB,SAAO,QAAQ,CAAC,EAAO,IAAU,CAj/DrC,MAk/DM,KAAK,WAAW,SAAS,EAAO,KAAY,KAAZ,OAAsB,KAEjD,IA/NT,gBAAmB,UAAG,CACpB,GAAI,GAAU,EAAa,KAAK,iBAAiB,SAAS,KAAK,MAC3D,EACJ,OAAS,GAAI,EAAG,EAAI,EAAQ,OAAQ,IAClC,GAAI,EAAQ,GAAK,KAAK,KAAK,OAAQ,CACjC,EAAU,EAAI,EACd,MAGJ,MAAO,IAET,gBAAQ,UAAG,CACT,MAAO,IAAK,EAAI,KAAK,SAyNzB,WAAa,EAAM,EAAQ,GAAO,CAChC,OAAW,KAAO,QAAO,KAAK,GAC5B,EAAS,GAAO,EAAK,GAEvB,AAAI,GACF,IAGJ,YAAoB,CAClB,QAAQ,IAAI,aAAc,GClgErB,WAAS,CACd,YAAY,EAAU,EAAM,EAAO,OAAQ,EAAkB,IAAK,CAChE,KAAK,OAAS,GAAI,GAAO,EAAU,EAAM,EAAM,GAEjD,aAAc,CACZ,MAAO,MAAK,OAAO,SAErB,YAAY,EAAU,CACpB,YAAK,OAAO,SAAW,EAChB,KAAK,OAAO,SAErB,SAAU,CACR,MAAO,MAAK,OAAO,KAErB,oBAAqB,CACnB,MAAO,MAAK,OAAO,gBAErB,YAAa,CACX,MAAO,MAAK,OAAO,QAErB,SAAU,CACR,MAAO,MAAK,OAAO,KAErB,SAAU,CACR,MAAO,MAAK,OAAO,eAErB,kBAAkB,EAAU,CAC1B,KAAK,OAAO,YC1BhB,OAAO,iBAAiB,OAAQ,UAAY,CACxC,SAAS,eAAe,UAAU,iBAAiB,QAAS,UAAY,CACpE,IAEA,GAAM,GAAW,CACb,UAAW,SAAS,eAAe,SACnC,UAAW,SAAS,eAAe,eACnC,qBAAsB,SAAS,eAAe,4BAG5C,EAAO,EAAS,UAAU,MAAM,OAChC,EAAO,EAAS,UAAU,MAC1B,EAAkB,EAAS,qBAAqB,MAEtD,GAAI,CACA,GAAM,GAAK,GAAI,GAAG,KAAM,EAAM,EAAM,GACpC,EAAG,oBACH,QAAQ,IAAI,EAAG,UAAU,KAAK,WACzB,EAAP,CACE,QAAQ,IAAI,GACZ,EAAS,QAKrB,WAAkB,EAAW,CACzB,GAAM,GAAW,SAAS,eAAe,SACzC,EAAS,UAAY,EACrB,EAAS,UAAU,IAAI,UAG3B,YAAuB,CACnB,GAAM,GAAW,SAAS,eAAe,SACzC,EAAS,UAAY,GACrB,EAAS,UAAU,OAAO",
  "names": []
}
